#!/usr/bin/php
<?php

use Bramus\Ansi\ControlSequences\EscapeSequences\Enums\SGR;
use minion\Console;

//require_once 'vendor/autoload.php';
/*
spl_autoload_register(function($class){

	//error_log("Trying to autoload {$class}...\n");

	$class = str_replace('\\', '/', $class);

	if( preg_match('/minion\/tasks\/(\w+)/i', $class, $match) ) {

		$file = 'tasks/'.$match[1].'.php';

	}
	elseif( preg_match('/minion\/commands\/(\w+)/i', $class, $match) ) {

		$file = 'commands/'.$match[1].'.php';

	}
	elseif( preg_match('/minion\/(\w+\/?)* /', $class) ) {

		$file = str_replace('minion', 'src', $class).'.php';

	}
	else {
		return false;
	}

	//error_log("Trying to require {$file}...\n");

	if( file_exists($file) ) {
		require_once $file;
	}

	return false;

});
*/

\minion\Console::getInstance()->bold()->text("MINION v1.0")->lf()->normal();

$startTime = microtime(true);

// @todo allow this to be a command line option
$configFile = 'config.yml';

// Build the environment object
try {

	$environment = new \minion\config\Environment($argv, $configFile);
	\minion\factories\CommandFactory::run($environment);

} catch( \Exception $e ) {

	Console::getInstance()->color([SGR::COLOR_FG_WHITE_BRIGHT, SGR::COLOR_BG_RED])
		   ->text("\n[ERROR] ".$e->getMessage())->lf()->nostyle()->bold()->text('MINION exiting.')->nostyle()->lf();

	exit();
}

Console::getInstance()->lf()->bold()->text("MINION done.")->normal()->text(' time='.round(microtime(true) - $startTime, 3).'s')->lf();